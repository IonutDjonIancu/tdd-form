Use a boilerplate

Clone hpfi-js-unit-testing and copy the react-jest folder.

This documentation is focused on the RTL (react-testing-library), which ships automatically with "react": "^17.0.0"

Setup

run npm install

in the package.json

"dependencies" should include 

"@testing-library/jest-dom": "^5.16.2"

"@testing-library/react": "^12.1.3"

"@testing-library/user-event": "^13.5.0"

these dependencies work with React version >17

check the package.json "scripts" to include "test": "react-scripts test"

run npm test all tests should pass even if you have none written. 

RTL (react-testing-library) only fails if there are errors thrown during rendering or testing functionalities

tests utilities dependencies

Validator library is used to help with various kinds of validations

check the package.json "dependencies" to include "validator": "^13.7.0"

otherwise npm install validator

RTL philosophy

RTL recommends to focus the testing on behavior and not the implementation, therefore the tests focus on how components interact and should not test if ComponentDidMount() works or not, which is out of scope for application unit testing

more on this could be found here: from the creator of RTL

Tests should be as similar as possible to user experience, finding form elements via their label, just like a user might do, instead of grabbing the elements by their data-testid

note that similar to users, screen-readers will not be able to find elements based on their data-testid

Priority in TDD

High value features

this is aimed at features that make up the core of the business value of the application, i.e.: Amazon app is created around browsing items and purchasing them

usually these tests focus on the happy path

Edge cases in high value features

validations and sad paths for the above

Third party functionalities

tests which focus on the dependencies on third party calls and/or data

React component testing

user interactions and events triggered by the user

conditional rendering

utils and hooks

Documentation focus

unit testing

integration testing

end-to-end testing

RTL Unit testing

Component testing

import { render, screen, cleanup } from '@testing-library/react'; 

import userEvent from '@testing-library/user-event';

Every test is done by invoking the test(); method

the expected parameters are as follows test('test description', /*callback*/);

Inside the callback

render the component render(<App />);

for multiple tests you can call the beforeEach() hook in order to render the component beforeEach(() => { render(<App />); });

find the element const myElement = screen.getByRole('textbox', { name: /myElement/i });

here is a cheatsheet for the built-in methods for finding elements and use cases 

assert that the element exists (depending on your need) expect(myElement).toBeInTheDocument();

simulate user activity userEvent.type(myElement, 'example text');

assert expected result expect(myElement.value).toBe('example text');

when a component purpose is met via the test, we usually call the cleanup(); method

a good hook to help with multiple components in this case is afterEach(() => { cleanup(); });

test('test description', () => {
  render(<App />);

  const myElement = screen.getByRole('textbox', { name: /myElement/i });

  expect(myElement).toBeInTheDocument();

  userEvent.type(myElement, 'example text');

  expect(myElement.value).toBe('example text');
  
  cleanup();
});

Note that component rendering done by the RTL will also render all itâ€™s children

Functionality testing

import the relevant functions that need to be tested

Same as Component testing

Inside the callback

assert the output of the method is as expected expect(mySum(2, 3)).toBe(5);



------------------------------------------------ to sync ------------------------------------------------



Describe block																								
	Similar to the test() method's first argument, the describe block can group similar tests under one block of code.																							
	The main functionality of the describe block is to offer the posibility to use the beforeEach(), as well as the other jest hooks inside the block.																							
Running one test only																								
	To run only one test with Jest, temporarily change that test command to a test.only.																							